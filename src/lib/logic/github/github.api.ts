import type { IGithubRepo } from "../model/github-repo";
import { HttpError } from "../model/http-error";
import type { IUser } from "../model/user";
import { blobToBase64 } from "../utils/file.utils";

/**
 * API to communicate with GitHub.
 */
export class GithubApi {

    private static baseUri = 'https://api.github.com';
    private static token: string;

    private constructor() {
        // Prevents initialization
    }

    public static setToken(token: string) {
        GithubApi.token = token;
    }

    public static async getUser(): Promise<IUser> {
        const response = await this.gitFetch(`${this.baseUri}/user`);
        return response.json() as Promise<IUser>;
    }

    public static async getRepository(user: string, repo: string): Promise<IGithubRepo> {
        const response = await this.gitFetch(`${this.baseUri}/repos/${user}/${repo}`)
        return response.json() as Promise<IGithubRepo>;
    }

    public static async createRepository(repo: string): Promise<IGithubRepo> {
        const response = await this.gitFetch(`${this.baseUri}/user/repos`, {
            method: 'POST',
            body: JSON.stringify({
                name: repo,
                description: 'Autogenerated Repository',
                private: true,
                has_wiki: false,
                has_projects: false,
                has_issues: false,
            }),
        })
        return response.json();
    }

    public static async getContent(user: string, repo: string): Promise<any> {
        const response = await this.gitFetch(`${this.baseUri}/repos/${user}/${repo}/contents/`);
        return response.json();
    }

    public static async putBlob(user: string, repo: string, blob: Blob, path: string, sha?: string) {
        const response = await this.gitFetch(`${this.baseUri}/repos/${user}/${repo}/contents/${path}`,
        {
            method: 'PUT',
            body: JSON.stringify({
                message: '[Auto] Database Update',
                content: await blobToBase64(blob),
                sha,
            }),
        });
        return response;
    }

    public static async getBlob(url: string): Promise<any> {
        return await (await this.gitFetch(url)).json();
    }

    private static async gitFetch(url: RequestInfo, options?: RequestInit) {
        if (this.token == null) {
            throw new Error("Cannot contact GitHub API without a token");
        }
        const updatedOptions = { ...options };
        updatedOptions.headers = { 
            ...updatedOptions.headers,
            Authorization: `Bearer ${this.token}`,
        }
        const response = await fetch(url, updatedOptions)
        if(!response.ok) {
            throw new HttpError(response);
        }
        return response;
    }

}